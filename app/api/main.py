"""Aplica√ß√£o principal FastAPI."""

from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse

from app.config import settings
from app.api.routes import properties, reservations


# Criar aplica√ß√£o FastAPI
app = FastAPI(
    title=settings.app_name,
    version=settings.app_version,
    description="""
    # Sistema de Reservas de Propriedades

    API para gerenciamento de propriedades e reservas para estadias de curto e m√©dio prazo.

    ## Funcionalidades

    ### üè† Propriedades
    - **Criar propriedade**: Cadastrar nova propriedade com endere√ßo completo
    - **Listar propriedades**: Buscar com filtros por localiza√ß√£o, capacidade e pre√ßo
    - **Verificar disponibilidade**: Checar disponibilidade para datas espec√≠ficas

    ### üìÖ Reservas
    - **Criar reserva**: Fazer reserva com valida√ß√µes autom√°ticas
    - **Listar reservas**: Buscar por cliente ou propriedade
    - **Cancelar reserva**: Cancelamento seguro (soft delete)

    ## Valida√ß√µes Autom√°ticas

    - **Datas**: Data fim > data in√≠cio, sem datas passadas
    - **Disponibilidade**: Verifica√ß√£o de conflitos de reservas
    - **Capacidade**: Valida√ß√£o de limite de h√≥spedes
    - **Pre√ßo**: C√°lculo autom√°tico (dias √ó pre√ßo_noite)

    ## Arquitetura

    Desenvolvido com **Arquitetura Hexagonal** (Ports & Adapters):
    - **Camada de Dom√≠nio**: Entidades puras
    - **Camada de Aplica√ß√£o**: Use cases e DTOs
    - **Camada de Infraestrutura**: Reposit√≥rios e banco de dados
    - **Camada de Interface**: API FastAPI

    ## Tecnologias

    - **FastAPI** + **Python 3.10+**
    - **PostgreSQL** + **SQLAlchemy**
    - **Pydantic** para valida√ß√£o
    - **Alembic** para migrations
    """,
    debug=settings.debug,
    docs_url="/docs",
    redoc_url="/redoc"
)

# Configurar CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=settings.cors_origins,
    allow_credentials=True,
    allow_methods=["GET", "POST", "PUT", "DELETE"],
    allow_headers=["*"],
)


# Handler global para exce√ß√µes
@app.exception_handler(HTTPException)
async def http_exception_handler(request, exc: HTTPException):
    """Handler personalizado para HTTPExceptions."""
    return JSONResponse(
        status_code=exc.status_code,
        content={
            "error": True,
            "message": exc.detail,
            "status_code": exc.status_code
        }
    )


@app.exception_handler(Exception)
async def general_exception_handler(request, exc: Exception):
    """Handler para exce√ß√µes n√£o capturadas."""
    return JSONResponse(
        status_code=500,
        content={
            "error": True,
            "message": "Erro interno do servidor",
            "status_code": 500
        }
    )


# Incluir roteadores
app.include_router(properties.router, prefix="/api/v1")
app.include_router(reservations.router, prefix="/api/v1")


# Rota de health check
@app.get("/", tags=["Health"])
async def root():
    """
    Health check da aplica√ß√£o.
    
    Retorna informa√ß√µes b√°sicas sobre o status da API.
    """
    return {
        "message": "Seazone API - Sistema de Reservas",
        "version": settings.app_version,
        "status": "healthy",
        "docs": "/docs",
        "redoc": "/redoc"
    }


@app.get("/health", tags=["Health"])
async def health_check():
    """
    Endpoint de health check para monitoramento.
    
    √ötil para verifica√ß√µes de sa√∫de da aplica√ß√£o em ambientes de produ√ß√£o.
    """
    return {
        "status": "healthy",
        "version": settings.app_version,
        "app": settings.app_name
    }


# Eventos de inicializa√ß√£o e shutdown
@app.on_event("startup")
async def startup_event():
    """Evento executado na inicializa√ß√£o da aplica√ß√£o."""
    print(f"üöÄ {settings.app_name} v{settings.app_version} iniciado!")
    print(f"üìö Documenta√ß√£o dispon√≠vel em: http://{settings.host}:{settings.port}/docs")
    print(f"üîç ReDoc dispon√≠vel em: http://{settings.host}:{settings.port}/redoc")


@app.on_event("shutdown")
async def shutdown_event():
    """Evento executado no shutdown da aplica√ß√£o."""
    print(f"üõë {settings.app_name} sendo finalizado...")


if __name__ == "__main__":
    import uvicorn
    uvicorn.run(
        "app.api.main:app",
        host=settings.host,
        port=settings.port,
        reload=settings.debug
    )